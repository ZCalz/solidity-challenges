// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import "forge-std/Test.sol";
import { WeightedVoting } from "src/exploits/weighted-voting/WeightedVoting.sol";

import "forge-std/console.sol";
contract PreventVotingChallenge is Test {
    WeightedVoting weightedVoting;

    uint256 allowVotingAtBlockNumber = 200;

    address voter1 = makeAddr("voter1");
    address voter2 = makeAddr("voter2");

    function setUp() public {
        vm.deal(voter1, 2 ether);
        vm.deal(voter2, 2 ether);
        weightedVoting = new WeightedVoting(allowVotingAtBlockNumber);

        vm.prank(voter1);
        weightedVoting.contributeWeight{value: 2 ether}();

        vm.prank(voter2);
        weightedVoting.contributeWeight{value: 2 ether}();
    }

    function testPreCheck() public view {
        assertEq(weightedVoting.votingBlock(), block.number + allowVotingAtBlockNumber);

        assertEq(weightedVoting.balances(voter1), 2 ether);
        assertEq(weightedVoting.balances(voter2), 2 ether);

        assertEq(weightedVoting.voters(0), voter1);
        assertEq(weightedVoting.voters(1), voter2);

        assertEq(weightedVoting.totalAmountContrubuted(), 4 ether);

        assertEq(weightedVoting.allowVoting(), false);
        
        assertEq(weightedVoting.votingWeight(voter1), 0);
        assertEq(weightedVoting.votingWeight(voter2), 0);
    }

    function testVotingWeights() public {
        vm.roll(210);
        weightedVoting.recordWeightAndRefundBalances();
        assertEq(weightedVoting.votingWeight(voter1), 50);
        assertEq(weightedVoting.votingWeight(voter2), 50);

        vm.prank(voter1);
        weightedVoting.vote();
        vm.prank(voter2);
        weightedVoting.vote();
        assertEq(weightedVoting.voted(voter1), true);
        assertEq(weightedVoting.voted(voter2), true);
    }

    
    function testPreventVoting() public {
        /* 

        Write the code to explot the vault here

        */

        // DO NOT REMOVE
        vm.roll(210);
        vm.expectRevert();
        weightedVoting.recordWeightAndRefundBalances();  // This will revert
        assertEq(address(voter1).balance, 0 ether);
        assertEq(address(voter2).balance, 0 ether);

        vm.prank(voter1);
        vm.expectRevert("Cannot vote yet");
        weightedVoting.vote();

        vm.prank(voter2);
        vm.expectRevert("Cannot vote yet");
        weightedVoting.vote();
    }
}
